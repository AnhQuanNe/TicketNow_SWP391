// src/user/js/CategoryPage.js
import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import EventSection from "./EventSection";
import { API_BASE_URL } from "../../config";

/*
  ‚úÖ FIX SUMMARY:
  - H·ªó tr·ª£ c·∫£ params ':categorySlug' v√† ':id' (nhi·ªÅu d·ª± √°n route kh√°c nhau).
  - Ki·ªÉm tra categoryInfo tr∆∞·ªõc khi d√πng .name ƒë·ªÉ tr√°nh crash.
  - Ch·ªâ fetch events khi c√≥ categoryInfo.id.
  - Comment r√µ r√†ng ch·ªó c·∫ßn ch√∫ √Ω.
*/

function CategoryPage() {
  // üü® useParams c√≥ th·ªÉ tr·∫£ v·ªÅ { categorySlug } n·∫øu route '/category/:categorySlug'
  //    ho·∫∑c { id } n·∫øu route '/category/:id'. M√¨nh l·∫•y c·∫£ hai ƒë·ªÉ an to√†n.
  const params = useParams(); // { categorySlug?: "...", id?: "..." }
  const categorySlugFromParams = params.categorySlug;
  const idFromParams = params.id;

  // üü® N·∫øu b·∫°n d√πng direct route '/music' (kh√¥ng c√≥ /category/), th√¨ useParams() s·∫Ω tr·∫£ {}.
  //      Trong tr∆∞·ªùng h·ª£p ƒë√≥ b·∫°n c√≥ th·ªÉ thay ƒë·ªïi App.js ƒë·ªÉ d√πng '/category/:id' ho·∫∑c
  //      th√™m route '/music' -> m√¨nh c√≥ x·ª≠ l√Ω fallback b√™n d∆∞·ªõi (xem ph·∫ßn map).
  const [events, setEvents] = useState([]);
  const [favorites, setFavorites] = useState([]);

  // √°nh x·∫° slug -> categoryId trong MongoDB
  const categoryMap = {
    music: { id: "cat_music", name: "√Çm nh·∫°c" },
    workshop: { id: "cat_workshop", name: "Workshop / K·ªπ nƒÉng" },
    sport: { id: "cat_sport", name: "Th·ªÉ thao" },
    market: { id: "cat_market", name: "H·ªôi ch·ª£" },

    // üü® T√ôY CH·ªåN: n·∫øu b·∫°n c√≥ routes d·∫°ng '/category/12345' (id th·ª±c trong DB),
    //           c√≥ th·ªÉ map th√™m ·ªü ƒë√¢y (ho·∫∑c fetch category t·ª´ API).
    // "12345": { id: "12345", name: "T√™n t·ª´ DB" },
  };

  // üü® CH√çNH S·ª¨A: h·ªó tr·ª£ l·∫•y gi√° tr·ªã t·ª´ param 'categorySlug' ho·∫∑c 'id'
  // n·∫øu c√≥ idFromParams nh∆∞ng idFromParams = 'music' th√¨ v·∫´n OK.
  const incomingKey = categorySlugFromParams || idFromParams;
  const categoryInfo = incomingKey ? categoryMap[incomingKey] : undefined;

  // üëá D√πng user t·ª´ localStorage (gi·ªØ nguy√™n logic c·ªßa b·∫°n)
  const user = JSON.parse(localStorage.getItem("user"));
  const userId = user?._id;

  // üîπ FETCH s·ª± ki·ªán ‚Äî CH·ªà ch·∫°y khi categoryInfo t·ªìn t·∫°i
  useEffect(() => {
    // üü® N·∫øu kh√¥ng c√≥ categoryInfo (v√≠ d·ª• param sai ho·∫∑c url l√† '/music' nh∆∞ng b·∫°n ch∆∞a map),
    //      kh√¥ng fetch ƒë·ªÉ tr√°nh crash; hi·ªÉn th·ªã th√¥ng b√°o thay v√†o ƒë√≥.
    if (!categoryInfo || !categoryInfo.id) {
      setEvents([]); // reset
      return;
    }

    // üîß B·∫°n c√≥ th·ªÉ t·ªëi ∆∞u b·∫±ng endpoint filter ph√≠a backend n·∫øu c√≥:
    // fetch(`${API_BASE_URL}/api/events?categoryId=${categoryInfo.id}`)
    fetch(`${API_BASE_URL}/api/events`)
      .then((res) => res.json())
      .then((data) => {
        // üü® C·∫©n tr·ªçng: m·ªôt s·ªë event.categoryId c√≥ th·ªÉ l√† object ho·∫∑c string -> robust check
        const filtered = data.filter((ev) => {
          // n·∫øu categoryId l√† object { _id: 'cat_music' } ho·∫∑c l√† string 'cat_music'
          if (!ev.categoryId) return false;
          if (typeof ev.categoryId === "string") {
            return ev.categoryId === categoryInfo.id;
          } else if (typeof ev.categoryId === "object") {
            // th·ª≠ ki·ªÉm tra _id ho·∫∑c id
            return (
              ev.categoryId._id === categoryInfo.id ||
              ev.categoryId.id === categoryInfo.id ||
              ev.categoryId === categoryInfo.id
            );
          }
          return false;
        });
        setEvents(filtered);
      })
      .catch((err) => {
        console.error("L·ªói khi fetch events:", err);
        setEvents([]); // ƒë·∫£m b·∫£o kh√¥ng undefined
      });
  }, [categoryInfo]); // üü® ph·ª• thu·ªôc v√†o categoryInfo

  // üîπ L·∫•y favorites t·ª´ localStorage theo user
  useEffect(() => {
    if (!userId) return;
    const storedFavs =
      JSON.parse(localStorage.getItem(`favorites_${userId}`)) || [];
    setFavorites(storedFavs);
  }, [userId]);

  // ‚ù§Ô∏è Toggle y√™u th√≠ch (gi·ªØ nh∆∞ b·∫°n ƒëang d√πng)
  const toggleFavorite = (event) => {
    setFavorites((prev) => {
      const exists = prev.find((f) => f._id === event._id);
      let updated;
      if (exists) {
        updated = prev.filter((f) => f._id !== event._id);
      } else {
        updated = [...prev, event];
      }
      if (userId) {
        localStorage.setItem(`favorites_${userId}`, JSON.stringify(updated));
      }
      return updated;
    });
  };

  // üü® B·∫¢O V·ªÜ RENDER: n·∫øu categoryInfo kh√¥ng t·ªìn t·∫°i ‚Üí th√¥ng b√°o r√µ r√†ng
  if (!incomingKey) {
    // kh√¥ng c√≥ param ·ªü URL (v√≠ d·ª• b·∫°n d√πng /music without route) -> h∆∞·ªõng d·∫´n s·ª≠a route
    return (
      <div className="container mx-auto py-8">
        <p>Kh√¥ng t√¨m th·∫•y danh m·ª•c. URL thi·∫øu tham s·ªë ph√¢n lo·∫°i.</p>
        <p>
          H√£y chuy·ªÉn ƒë·∫øn ƒë∆∞·ªùng d·∫´n d·∫°ng <code>/category/music</code> ho·∫∑c update{" "}
          <code>App.js</code> ƒë·ªÉ th√™m route <code>/music</code>.
        </p>
      </div>
    );
  }

  if (!categoryInfo) {
    // param c√≥ nh∆∞ng kh√¥ng c√≥ trong categoryMap
    return (
      <div className="container mx-auto py-8">
        <p>
          Danh m·ª•c "<strong>{incomingKey}</strong>" kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c
          c·∫•u h√¨nh trong <code>categoryMap</code>.
        </p>
        <p>
          M·ªü <code>src/user/js/CategoryPage.js</code> v√† th√™m mapping cho key n√†y
          (v√≠ d·ª•: <code>music: &#123; id: "cat_music", name: "√Çm nh·∫°c" &#125;</code>).
        </p>
      </div>
    );
  }

  // ‚úÖ N·∫øu m·ªçi th·ª© OK th√¨ render danh s√°ch
  return (
    <div className="container mx-auto py-8">
      {/* üü® an to√†n: categoryInfo ƒë√£ t·ªìn t·∫°i, c√≥ th·ªÉ d√πng .name */}
      <h2 className="text-2xl font-bold mb-6">{categoryInfo.name}</h2>

      {events.length > 0 ? (
        <EventSection
          title=""
          events={events}
          favorites={favorites}
          toggleFavorite={toggleFavorite}
        />
      ) : (
        <p>Kh√¥ng c√≥ s·ª± ki·ªán {categoryInfo.name.toLowerCase()} n√†o.</p>
      )}
    </div>
  );
}

export default CategoryPage;
