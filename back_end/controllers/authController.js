import User from "../model/User.js";
import bcrypt from "bcryptjs";
import nodemailer from "nodemailer";
import jwt from "jsonwebtoken";
import { OAuth2Client } from "google-auth-library";

// üß© H√†m t·∫°o token
const generateToken = (id) =>
  jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "7d" });

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// üü¢ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
export const register = async (req, res) => {
  try {
    const { name, email, passwordHash, phone, studentId } = req.body;

    // ‚úÖ 1Ô∏è‚É£ Ki·ªÉm tra ƒë·ªß tr∆∞·ªùng (tr·ª´ studentId)
    if (!name || !email || !passwordHash || !phone) {
      return res.status(400).json({
        message:
          "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, email, m·∫≠t kh·∫©u v√† s·ªë ƒëi·ªán tho·∫°i.",
      });
    }

    // ‚úÖ 2Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        message:
          "ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá! (ch·ªâ ch·∫•p nh·∫≠n d·∫°ng ten@gmail.com)",
      });
    }

    // ‚úÖ 3Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i (10 ch·ªØ s·ªë)
    if (!/^0[0-9]{9}$/.test(phone)) {
      return res.status(400).json({
        message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë!",
      });
    }

    // ‚úÖ 4Ô∏è‚É£ Ki·ªÉm tra tr√πng email, s·ªë ƒëi·ªán tho·∫°i, m√£ sinh vi√™n
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    const existingPhone = await User.findOne({ phone });
    if (existingPhone) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
    }

    if (studentId && studentId.trim() !== "") {
      const existingStudent = await User.findOne({ studentId });
      if (existingStudent) {
        return res
          .status(400)
          .json({ message: "M√£ sinh vi√™n n√†y ƒë√£ t·ªìn t·∫°i!" });
      }
    }

    // ‚úÖ 5Ô∏è‚É£ T·∫°o t√†i kho·∫£n m·ªõi
    const user = await User.create({
      name,
      email,
      passwordHash,
      phone,
      studentId: studentId?.trim() || null,
    });

    // ‚úÖ 6Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      studentId: user.studentId,
      token: generateToken(user._id),
    });
  } catch (err) {
    console.error("‚ö†Ô∏è L·ªói ƒëƒÉng k√Ω:", err);

    // ‚úÖ N·∫øu l√† l·ªói Mongo duplicate key (E11000)
    if (err.code === 11000) {
      const field = Object.keys(err.keyPattern)[0];
      const value = err.keyValue[field];
      let msg = "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i!";
      if (field === "email") msg = `Email "${value}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!`;
      if (field === "phone") msg = `S·ªë ƒëi·ªán tho·∫°i "${value}" ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!`;
      if (field === "studentId") msg = `M√£ sinh vi√™n "${value}" ƒë√£ t·ªìn t·∫°i!`;
      return res.status(400).json({ message: msg });
    }

    // ‚úÖ L·ªói kh√°c
    return res
      .status(500)
      .json({ message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// üü¢ ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (user && (await user.matchPassword(password))) {
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        phone: user.phone,
        studentId: user.studentId,
        avatar: user.avatar,
        gender: user.gender, // ü©∑ TH√äM D√íNG N√ÄY
        dob: user.dob, // ü©µ V√Ä D√íNG N√ÄY (n·∫øu c√≥ hi·ªÉn th·ªã ng√†y sinh)
        token: generateToken(user._id),
      });
    } else {
      res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }
  } catch (err) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
// üü¢ ƒêƒÉng nh·∫≠p b·∫±ng Google
export const googleLogin = async (req, res) => {
  try {
    const { credential } = req.body;

    if (!credential) {
      return res.status(400).json({ message: "Thi·∫øu credential t·ª´ frontend!" });
    }

    console.log(
      "üì© Nh·∫≠n credential t·ª´ frontend:",
      credential.slice(0, 20) + "..."
    );

    const ticket = await client.verifyIdToken({
      idToken: credential,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    console.log("‚úÖ Payload t·ª´ Google:", payload);

    const { email, name, picture } = payload;

    if (!email) {
      return res
        .status(400)
        .json({ message: "Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ Google!" });
    }

    let user = await User.findOne({ email });
    if (!user) {
      console.log("üÜï T·∫°o user m·ªõi t·ª´ Google:", email);
      user = await User.create({
        name,
        email,
        passwordHash: null,
        avatar: picture,
        authProvider: "google",
      });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({
      _id: user._id,
      name: user.name,
      email: user.email,
      avatar: user.avatar || picture,
      token,
    });
  } catch (err) {
    console.error("‚ùå L·ªói Google login:", err.message);
    res.status(500).json({
      message: "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i.",
      error: err.message,
    });
  }
};
// G·ª≠i OTP reset password
export const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i." });

    // T·∫°o OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.resetOTP = otp;
    user.resetOTPExpire = Date.now() + 5 * 60 * 1000; // 5 ph√∫t
    await user.save();

    // C·∫•u h√¨nh g·ª≠i mail
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: `"TicketNow" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "X√°c nh·∫≠n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      html: `
        <h3>Xin ch√†o ${user.name || "b·∫°n"},</h3>
        <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n TicketNow.</p>
        <p>M√£ OTP c·ªßa b·∫°n l√†:</p>
        <h2 style="color:#ff914d;">${otp}</h2>
        <p>M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>5 ph√∫t</b>.</p>
      `,
    });

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n." });
  } catch (err) {
    console.error("‚ùå L·ªói forgotPassword:", err);
    res.status(500).json({ message: "G·ª≠i email th·∫•t b·∫°i." });
  }
};

export const verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i." });

    if (user.resetOTP !== otp)
      return res.status(400).json({ message: "M√£ OTP kh√¥ng ƒë√∫ng." });

    if (user.resetOTPExpire < Date.now())
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n." });

    res.json({ message: "OTP h·ª£p l·ªá, b·∫°n c√≥ th·ªÉ ƒë·∫∑t m·∫≠t kh·∫©u m·ªõi." });
  } catch (err) {
    res.status(500).json({ message: "L·ªói x√°c minh OTP." });
  }
};

export const resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });

    if (user.resetOTP !== otp)
      return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá." });

    if (user.resetOTPExpire < Date.now())
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n." });

    user.passwordHash = newPassword;
    user.resetOTP = null;
    user.resetOTPExpire = null;
    await user.save(); // middleware s·∫Ω t·ª± hash tr∆∞·ªõc khi l∆∞u

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå resetPassword error:", err);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng." });
  }
};

