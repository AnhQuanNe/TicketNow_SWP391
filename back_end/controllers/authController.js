import User from "../model/User.js";
import jwt from "jsonwebtoken";

// üß© H√†m t·∫°o token
const generateToken = (id) =>
  jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "7d" });

// üü¢ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
export const register = async (req, res) => {
  try {
    const { name, email, passwordHash, phone, studentId } = req.body;

    // ‚úÖ 1Ô∏è‚É£ Ki·ªÉm tra ƒë·ªß tr∆∞·ªùng (tr·ª´ studentId)
    if (!name || !email || !passwordHash || !phone) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, email, m·∫≠t kh·∫©u v√† s·ªë ƒëi·ªán tho·∫°i." });
    }

    // ‚úÖ 2Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/;
    if (!emailRegex.test(email)) {
      return res
        .status(400)
        .json({ message: "ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá! (ch·ªâ ch·∫•p nh·∫≠n d·∫°ng ten@gmail.com)" });
    }

    // ‚úÖ 3Ô∏è‚É£ Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i (10 ch·ªØ s·ªë)
    if (!/^[0-9]{10}$/.test(phone)) {
      return res
        .status(400)
        .json({ message: "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë!" });
    }

    // ‚úÖ 4Ô∏è‚É£ Ki·ªÉm tra tr√πng email, s·ªë ƒëi·ªán tho·∫°i, m√£ sinh vi√™n
    const existingEmail = await User.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    const existingPhone = await User.findOne({ phone });
    if (existingPhone) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
    }

    if (studentId && studentId.trim() !== "") {
      const existingStudent = await User.findOne({ studentId });
      if (existingStudent) {
        return res.status(400).json({ message: "M√£ sinh vi√™n n√†y ƒë√£ t·ªìn t·∫°i!" });
      }
    }

    // ‚úÖ 5Ô∏è‚É£ T·∫°o t√†i kho·∫£n m·ªõi
    const user = await User.create({
      name,
      email,
      passwordHash,
      phone,
      studentId: studentId?.trim() || null,
    });

    // ‚úÖ 6Ô∏è‚É£ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.status(201).json({
      _id: user._id,
      name: user.name,
      email: user.email,
      phone: user.phone,
      studentId: user.studentId,
      token: generateToken(user._id),
    });

  } catch (err) {
    console.error("‚ö†Ô∏è L·ªói ƒëƒÉng k√Ω:", err);

    // ‚úÖ N·∫øu l√† l·ªói Mongo duplicate key (E11000)
    if (err.code === 11000) {
      const field = Object.keys(err.keyPattern)[0];
      const value = err.keyValue[field];
      let msg = "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i!";
      if (field === "email") msg = `Email "${value}" ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!`;
      if (field === "phone") msg = `S·ªë ƒëi·ªán tho·∫°i "${value}" ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!`;
      if (field === "studentId") msg = `M√£ sinh vi√™n "${value}" ƒë√£ t·ªìn t·∫°i!`;
      return res.status(400).json({ message: msg });
    }

    // ‚úÖ L·ªói kh√°c
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// üü¢ ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
export const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (user && (await user.matchPassword(password))) {
      res.json({
        _id: user._id,
        name: user.name,
        email: user.email,
        phone: user.phone,
        studentId: user.studentId,
        avatar: user.avatar,
        token: generateToken(user._id),
      });
    } else {
      res.status(401).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }
  } catch (err) {
    res.status(500).json({ message: "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i." });
  }
};
