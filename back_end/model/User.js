import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true }, // gi·ªØ nguy√™n t√™n c≈©
  phone: { type: String },
  roleId: { type: String, ref: "Role" },
  studentId: { type: String, default: null },
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now }
});

// üß© T·ª± ƒë·ªông m√£ ho√° m·∫≠t kh·∫©u khi t·∫°o user m·ªõi
userSchema.pre("save", async function (next) {
  // Ch·ªâ m√£ ho√° n·∫øu field passwordHash m·ªõi ƒë∆∞·ª£c s·ª≠a
  if (!this.isModified("passwordHash")) return next();
  const salt = await bcrypt.genSalt(10);
  this.passwordHash = await bcrypt.hash(this.passwordHash, salt);
  next();
});

// üîê So s√°nh m·∫≠t kh·∫©u khi login
userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.passwordHash);
};

export default mongoose.model("User", userSchema, "Users");
